// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/rode/collector-harbor/harbor"
)

type FakeClient struct {
	GetArtifactReportStub        func(string, string, string) (*harbor.Report, error)
	getArtifactReportMutex       sync.RWMutex
	getArtifactReportArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getArtifactReportReturns struct {
		result1 *harbor.Report
		result2 error
	}
	getArtifactReportReturnsOnCall map[int]struct {
		result1 *harbor.Report
		result2 error
	}
	GetArtifactsStub        func(string, string) ([]*harbor.Artifact, error)
	getArtifactsMutex       sync.RWMutex
	getArtifactsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getArtifactsReturns struct {
		result1 []*harbor.Artifact
		result2 error
	}
	getArtifactsReturnsOnCall map[int]struct {
		result1 []*harbor.Artifact
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetArtifactReport(arg1 string, arg2 string, arg3 string) (*harbor.Report, error) {
	fake.getArtifactReportMutex.Lock()
	ret, specificReturn := fake.getArtifactReportReturnsOnCall[len(fake.getArtifactReportArgsForCall)]
	fake.getArtifactReportArgsForCall = append(fake.getArtifactReportArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetArtifactReportStub
	fakeReturns := fake.getArtifactReportReturns
	fake.recordInvocation("GetArtifactReport", []interface{}{arg1, arg2, arg3})
	fake.getArtifactReportMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetArtifactReportCallCount() int {
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	return len(fake.getArtifactReportArgsForCall)
}

func (fake *FakeClient) GetArtifactReportCalls(stub func(string, string, string) (*harbor.Report, error)) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = stub
}

func (fake *FakeClient) GetArtifactReportArgsForCall(i int) (string, string, string) {
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	argsForCall := fake.getArtifactReportArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) GetArtifactReportReturns(result1 *harbor.Report, result2 error) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = nil
	fake.getArtifactReportReturns = struct {
		result1 *harbor.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactReportReturnsOnCall(i int, result1 *harbor.Report, result2 error) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = nil
	if fake.getArtifactReportReturnsOnCall == nil {
		fake.getArtifactReportReturnsOnCall = make(map[int]struct {
			result1 *harbor.Report
			result2 error
		})
	}
	fake.getArtifactReportReturnsOnCall[i] = struct {
		result1 *harbor.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifacts(arg1 string, arg2 string) ([]*harbor.Artifact, error) {
	fake.getArtifactsMutex.Lock()
	ret, specificReturn := fake.getArtifactsReturnsOnCall[len(fake.getArtifactsArgsForCall)]
	fake.getArtifactsArgsForCall = append(fake.getArtifactsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetArtifactsStub
	fakeReturns := fake.getArtifactsReturns
	fake.recordInvocation("GetArtifacts", []interface{}{arg1, arg2})
	fake.getArtifactsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetArtifactsCallCount() int {
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	return len(fake.getArtifactsArgsForCall)
}

func (fake *FakeClient) GetArtifactsCalls(stub func(string, string) ([]*harbor.Artifact, error)) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = stub
}

func (fake *FakeClient) GetArtifactsArgsForCall(i int) (string, string) {
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	argsForCall := fake.getArtifactsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetArtifactsReturns(result1 []*harbor.Artifact, result2 error) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = nil
	fake.getArtifactsReturns = struct {
		result1 []*harbor.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactsReturnsOnCall(i int, result1 []*harbor.Artifact, result2 error) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = nil
	if fake.getArtifactsReturnsOnCall == nil {
		fake.getArtifactsReturnsOnCall = make(map[int]struct {
			result1 []*harbor.Artifact
			result2 error
		})
	}
	fake.getArtifactsReturnsOnCall[i] = struct {
		result1 []*harbor.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ harbor.Client = new(FakeClient)
