// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/rode/collector-harbor/harbor"
)

type FakeClient struct {
	GetArtifactReportStub        func(string, string, string) (*harbor.Report, error)
	getArtifactReportMutex       sync.RWMutex
	getArtifactReportArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getArtifactReportReturns struct {
		result1 *harbor.Report
		result2 error
	}
	getArtifactReportReturnsOnCall map[int]struct {
		result1 *harbor.Report
		result2 error
	}
	GetArtifactUrlStub        func(string, string, string) (string, error)
	getArtifactUrlMutex       sync.RWMutex
	getArtifactUrlArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getArtifactUrlReturns struct {
		result1 string
		result2 error
	}
	getArtifactUrlReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetArtifactsStub        func(string, string) ([]*harbor.Artifact, error)
	getArtifactsMutex       sync.RWMutex
	getArtifactsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getArtifactsReturns struct {
		result1 []*harbor.Artifact
		result2 error
	}
	getArtifactsReturnsOnCall map[int]struct {
		result1 []*harbor.Artifact
		result2 error
	}
	GetProjectByNameStub        func(string) (*harbor.Project, error)
	getProjectByNameMutex       sync.RWMutex
	getProjectByNameArgsForCall []struct {
		arg1 string
	}
	getProjectByNameReturns struct {
		result1 *harbor.Project
		result2 error
	}
	getProjectByNameReturnsOnCall map[int]struct {
		result1 *harbor.Project
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetArtifactReport(arg1 string, arg2 string, arg3 string) (*harbor.Report, error) {
	fake.getArtifactReportMutex.Lock()
	ret, specificReturn := fake.getArtifactReportReturnsOnCall[len(fake.getArtifactReportArgsForCall)]
	fake.getArtifactReportArgsForCall = append(fake.getArtifactReportArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetArtifactReportStub
	fakeReturns := fake.getArtifactReportReturns
	fake.recordInvocation("GetArtifactReport", []interface{}{arg1, arg2, arg3})
	fake.getArtifactReportMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetArtifactReportCallCount() int {
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	return len(fake.getArtifactReportArgsForCall)
}

func (fake *FakeClient) GetArtifactReportCalls(stub func(string, string, string) (*harbor.Report, error)) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = stub
}

func (fake *FakeClient) GetArtifactReportArgsForCall(i int) (string, string, string) {
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	argsForCall := fake.getArtifactReportArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) GetArtifactReportReturns(result1 *harbor.Report, result2 error) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = nil
	fake.getArtifactReportReturns = struct {
		result1 *harbor.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactReportReturnsOnCall(i int, result1 *harbor.Report, result2 error) {
	fake.getArtifactReportMutex.Lock()
	defer fake.getArtifactReportMutex.Unlock()
	fake.GetArtifactReportStub = nil
	if fake.getArtifactReportReturnsOnCall == nil {
		fake.getArtifactReportReturnsOnCall = make(map[int]struct {
			result1 *harbor.Report
			result2 error
		})
	}
	fake.getArtifactReportReturnsOnCall[i] = struct {
		result1 *harbor.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactUrl(arg1 string, arg2 string, arg3 string) (string, error) {
	fake.getArtifactUrlMutex.Lock()
	ret, specificReturn := fake.getArtifactUrlReturnsOnCall[len(fake.getArtifactUrlArgsForCall)]
	fake.getArtifactUrlArgsForCall = append(fake.getArtifactUrlArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetArtifactUrlStub
	fakeReturns := fake.getArtifactUrlReturns
	fake.recordInvocation("GetArtifactUrl", []interface{}{arg1, arg2, arg3})
	fake.getArtifactUrlMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetArtifactUrlCallCount() int {
	fake.getArtifactUrlMutex.RLock()
	defer fake.getArtifactUrlMutex.RUnlock()
	return len(fake.getArtifactUrlArgsForCall)
}

func (fake *FakeClient) GetArtifactUrlCalls(stub func(string, string, string) (string, error)) {
	fake.getArtifactUrlMutex.Lock()
	defer fake.getArtifactUrlMutex.Unlock()
	fake.GetArtifactUrlStub = stub
}

func (fake *FakeClient) GetArtifactUrlArgsForCall(i int) (string, string, string) {
	fake.getArtifactUrlMutex.RLock()
	defer fake.getArtifactUrlMutex.RUnlock()
	argsForCall := fake.getArtifactUrlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) GetArtifactUrlReturns(result1 string, result2 error) {
	fake.getArtifactUrlMutex.Lock()
	defer fake.getArtifactUrlMutex.Unlock()
	fake.GetArtifactUrlStub = nil
	fake.getArtifactUrlReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactUrlReturnsOnCall(i int, result1 string, result2 error) {
	fake.getArtifactUrlMutex.Lock()
	defer fake.getArtifactUrlMutex.Unlock()
	fake.GetArtifactUrlStub = nil
	if fake.getArtifactUrlReturnsOnCall == nil {
		fake.getArtifactUrlReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getArtifactUrlReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifacts(arg1 string, arg2 string) ([]*harbor.Artifact, error) {
	fake.getArtifactsMutex.Lock()
	ret, specificReturn := fake.getArtifactsReturnsOnCall[len(fake.getArtifactsArgsForCall)]
	fake.getArtifactsArgsForCall = append(fake.getArtifactsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetArtifactsStub
	fakeReturns := fake.getArtifactsReturns
	fake.recordInvocation("GetArtifacts", []interface{}{arg1, arg2})
	fake.getArtifactsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetArtifactsCallCount() int {
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	return len(fake.getArtifactsArgsForCall)
}

func (fake *FakeClient) GetArtifactsCalls(stub func(string, string) ([]*harbor.Artifact, error)) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = stub
}

func (fake *FakeClient) GetArtifactsArgsForCall(i int) (string, string) {
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	argsForCall := fake.getArtifactsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetArtifactsReturns(result1 []*harbor.Artifact, result2 error) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = nil
	fake.getArtifactsReturns = struct {
		result1 []*harbor.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetArtifactsReturnsOnCall(i int, result1 []*harbor.Artifact, result2 error) {
	fake.getArtifactsMutex.Lock()
	defer fake.getArtifactsMutex.Unlock()
	fake.GetArtifactsStub = nil
	if fake.getArtifactsReturnsOnCall == nil {
		fake.getArtifactsReturnsOnCall = make(map[int]struct {
			result1 []*harbor.Artifact
			result2 error
		})
	}
	fake.getArtifactsReturnsOnCall[i] = struct {
		result1 []*harbor.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetProjectByName(arg1 string) (*harbor.Project, error) {
	fake.getProjectByNameMutex.Lock()
	ret, specificReturn := fake.getProjectByNameReturnsOnCall[len(fake.getProjectByNameArgsForCall)]
	fake.getProjectByNameArgsForCall = append(fake.getProjectByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProjectByNameStub
	fakeReturns := fake.getProjectByNameReturns
	fake.recordInvocation("GetProjectByName", []interface{}{arg1})
	fake.getProjectByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetProjectByNameCallCount() int {
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	return len(fake.getProjectByNameArgsForCall)
}

func (fake *FakeClient) GetProjectByNameCalls(stub func(string) (*harbor.Project, error)) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = stub
}

func (fake *FakeClient) GetProjectByNameArgsForCall(i int) string {
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	argsForCall := fake.getProjectByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetProjectByNameReturns(result1 *harbor.Project, result2 error) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = nil
	fake.getProjectByNameReturns = struct {
		result1 *harbor.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetProjectByNameReturnsOnCall(i int, result1 *harbor.Project, result2 error) {
	fake.getProjectByNameMutex.Lock()
	defer fake.getProjectByNameMutex.Unlock()
	fake.GetProjectByNameStub = nil
	if fake.getProjectByNameReturnsOnCall == nil {
		fake.getProjectByNameReturnsOnCall = make(map[int]struct {
			result1 *harbor.Project
			result2 error
		})
	}
	fake.getProjectByNameReturnsOnCall[i] = struct {
		result1 *harbor.Project
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getArtifactReportMutex.RLock()
	defer fake.getArtifactReportMutex.RUnlock()
	fake.getArtifactUrlMutex.RLock()
	defer fake.getArtifactUrlMutex.RUnlock()
	fake.getArtifactsMutex.RLock()
	defer fake.getArtifactsMutex.RUnlock()
	fake.getProjectByNameMutex.RLock()
	defer fake.getProjectByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ harbor.Client = new(FakeClient)
